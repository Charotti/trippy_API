const express = require("express");
// const { Pool } = require("pg");

const Restaurant = require("../models/restaurantsModel");
// const Postgres = new Pool({ ssl: { rejectUnauthorized: false } });
const router = express.Router();
const Joi = require("Joi");

const restaurants = [
  {
    id: 1,
    name: "Les trois Mousquetaires",
    address: "22 av des Champs-Élysées",
    city: "Paris",
    country: "France",
    stars: 4,
    cuisine: "french",
    priceCategory: 3,
  },
  {
    id: 2,
    name: "The Fat Guy",
    address: "47 Jackson Boulevard",
    city: "New York",
    country: "US",
    stars: 5,
    cuisine: "burger",
    priceCategory: 1,
  },
  {
    id: 3,
    name: "Veggies",
    address: "77 Avenir Street",
    city: "Sydney",
    country: "Australia",
    stars: 5,
    cuisine: "vegan",
    priceCategory: 2,
  },
];
// JOI VALIDATION SHEMA
const restaurantSchema = Joi.object({
  name: Joi.string().required(),
  address: Joi.string().required(),
  city: Joi.string().alphanum().required(),
  country: Joi.string().alphanum().required(),
  stars: Joi.number().integer().min(1).max(5).required(),
  cuisine: Joi.string().required(),
  priceCategory: Joi.number().integer().min(1).max(3).required(),
});
function validRestaurant(req, res, next) {
  const validation = restaurantSchema.validate(req.body);
  if (validation.error) {
    return res.status(400).json({
      message: "Bad request (400)",
      description: validation.error.details[0].message,
    });
  }
  next();
}
//POST RESTAURANTS//
router.post("/", async (req, res) => {
  let restaurants;
  // console.log(req.body);
  try {
    restaurants = await Restaurant.create(req.body);
  } catch (err) {
    console.log(err);
    return res.status(400).send("error 400");
  }
  res.status(201).json("restaurant created");
});

// GET ALL RESTAURANTS
// router.get("/", async (_req, res) => {
//   let restaurants = await Postgres.query("SELECT * FROM restaurants");
//   res.json(restaurants.rows);
// });

router.get("/", async (req, res) => {
  let restaurants;
  try {
    restaurants = await Restaurant.find();
  } catch (err) {
    console.log(err);
    return res.status(400).json({
      message: "An error happened",
    });
  }
  res.json(restaurants);
});
// GET RESTAURANTS BY ID
// router.get("/:id", async (req, res) => {
//   let restaurants = await Postgres.query(
//     "SELECT id FROM restaurants WHERE id=$1",
//     [req.params.id]
//   );
//   res.json(restaurants.rows);
// });

//GET RESTAURANTS BY ID AVEC MONGODB//
router.get("/:id", async (req, res) => {
  let restaurant;
  try {
    restaurant = await Restaurant.findById(req.params.id);
  } catch (err) {
    console.log(err);
    return res.status(400).send("error 400");
  }
  res.json(restaurant);
});
// POST AN RESTAURANT
// router.post("/", validRestaurant, (req, res) => {
//   const restaurant = req.body;
//   restaurant.id = restaurants.length + 1;
//   restaurants.push(restaurant);
//   res.json({ message: "Restaurant added", restaurant });
// });

//PATCH
// router.patch("/:id", (req, res) => {
//   const restaurant = restaurants.find((restaurant) => {
//     return restaurant.id.toString() === req.params.id;
//   });
//   if (!restaurant) {
//     return res.send(`Restaurant with id: ${req.params.id} not found`);
//   }
//   restaurant.name = req.body.name;
//   res.json({
//     message: "restaurant was updated:",
//     restaurant,
//   });
// });

//CHANGEMENT NOM DE RESTO AVEC MONGODB//
router.patch("/:id", async (req, res) => {
  let restaurant;
  try {
    restaurant = await Restaurant.findByIdAndUpdate(req.params.id, {
      name: req.body.name,
    });
  } catch (err) {
    console.log(error);
    res.status(400).json({
      message: "An error happened",
    });
  }
  res.json({ message: "restaurant updated" });
});

//DELETE
// router.delete("/:id", (req, res) => {
//   const restaurant = restaurants.find((restaurant) => {
//     return restaurant.id.toString() === req.params.id;
//   });
//   if (!restaurant) {
//     return res.send(`restaurant with id : $ {req.params.id} not found`);
//   }
//   const index = restaurants.indexOf(restaurant);
//   restaurants.splice(index, 1);
//   res.json({
//     message: ` the restaurant with id $ {req.params.id} was removed`,
//     restaurant,
//   });
// });
router.delete("/:id", async (req, res) => {
  let restaurant;
  try {
    restaurant = await Restaurant.findByIdAndDelete(req.params.id);
  } catch (err) {
    console.log(err);
    res.status(400).json({
      message: "an error happened",
    });
  }
  res.json("restaurant supprimé");
});

module.exports = router;
